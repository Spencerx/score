name: Windows build
on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - v*

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  win32:
    name: Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Dependencies
        shell: bash
        run: ./ci/win32.deps.sh

      - name: Build
        shell: bash
        run: ./ci/win32.build.sh

      - name: Deploy
        shell: bash
        run: |
          export GITTAGNOV=$(echo "$GITHUB_REF" | sed "s/.*\///;s/^v//")
          export BUILD_ARTIFACTSTAGINGDIRECTORY="$PWD/staging"
          mkdir -p "$BUILD_ARTIFACTSTAGINGDIRECTORY"
          ./ci/win32.deploy.sh

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: |
            staging/*.*

      - name: Continuous
        uses: softprops/action-gh-release@v2
        if: ${{ ! startsWith(github.ref, 'refs/tags/') }} && github.event_name != 'pull_request'
        with:
          name: "Continuous"
          tag_name: "continuous"
          body: ""
          append_body: true
          generate_release_notes: false
          files: |
            staging/*.*

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request'
        with:
          body: ""
          append_body: true
          generate_release_notes: false
          files: |
            staging/*.*

  winstore:
    name: Windows (store)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Dependencies
        shell: bash
        run: |
          ./ci/win32.deps.sh

      - name: Build
        shell: cmd
        run: |
          call "%cd%\ci\win32.store.build.cmd"

      - name: Create certificate
        if: github.event_name != 'pull_request'
        shell: pwsh
        env:
          OSSIA_WIN32_CERT_SUBJECT: ${{ secrets.OSSIA_WIN32_CERT_SUBJECT }}
          OSSIA_WIN32_CERT_PASSWORD: ${{ secrets.OSSIA_WIN32_CERT_PASSWORD }}
        run: |
          .\ci\win32.store.cert.ps1

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Deploy
        if: github.event_name != 'pull_request'
        shell: cmd
        env:
          OSSIA_WIN32_CERT_SUBJECT: ${{ secrets.OSSIA_WIN32_CERT_SUBJECT }}
          OSSIA_WIN32_CERT_PASSWORD: ${{ secrets.OSSIA_WIN32_CERT_PASSWORD }}
        run: |
          call "%cd%\ci\win32.store.deploy.cmd"

      - name: Upload build
        uses: actions/upload-artifact@v4
        if: github.event_name != 'pull_request'
        with:
          name: windows-store
          path: |
            output/*.appxbundle

      - name: Continuous
        uses: softprops/action-gh-release@v2
        if: ${{ ! startsWith(github.ref, 'refs/tags/') }} && github.event_name != 'pull_request'
        with:
          name: "Continuous"
          tag_name: "continuous"
          body: ""
          append_body: true
          generate_release_notes: false
          files: |
            output/*.appxbundle

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request'
        with:
          body: ""
          append_body: true
          generate_release_notes: false
          files: |
            output/*.appxbundle

  mingw:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - { sys: mingw64, env: x86_64 }
          - { sys: ucrt64,  env: ucrt-x86_64 }
          - { sys: clang64, env: clang-x86_64 }
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Dependencies
        shell: bash
        run: |
          ./ci/win32.mingw.deps.sh

      - name: Setup msys2 and mingw-w64
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          update: true
          pacboy: >-
            cmake:p
            ninja:p
            toolchain:p
            cppwinrt:p
            qt6-base:p
            qt6-declarative:p
            qt6-websockets:p
            qt6-serialport:p
            qt6-shadertools:p
            qt6-scxml:p
            qt6-tools:p
            boost:p
            portaudio:p
            fftw:p
            ffmpeg:p
            SDL2:p

      - name: Build
        shell: msys2 {0}
        run: |
          ./ci/win32.mingw.build.sh

  winmvsc:
    name: MSVC
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: 6.7.*
          modules: qtwebsockets qtserialport qtscxml qtshadertools

      - name: Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Dependencies
        shell: bash
        run: |
          ./ci/win32.msvc.deps.sh

      - name: Build
        shell: cmd
        run: |
          call "%cd%\ci\win32.msvc.build.cmd"

